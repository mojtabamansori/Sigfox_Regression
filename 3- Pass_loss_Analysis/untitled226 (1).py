# -*- coding: utf-8 -*-
"""Untitled226.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19cJN7OQTPAcn2GcyPl6U0dwlzl7raNK2

**import library**
"""

import math
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

"""**Load Data**"""

import pandas as pd

# بارگذاری فایل CSV
original_file = np.array(pd.read_csv('/content/Orginal.csv'))

# برش داده‌ها
x = original_file[:, :-3]
y = original_file[:, -2:]

x_1 = x[:,30]
y_1 = y[:,0]
y_2 = y[:,1]

x_1_filtered = x_1[x_1 != -200]
y_1_filtered = y_1[x_1 != -200]
y_2_filtered = y_2[x_1 != -200]

P = 0
f = 868 # MH
P_loss = P - x_1_filtered
list_of_d = 10 ** ((P_loss - 20 * np.log10(f) - 32.45) / 20)

plt.scatter(y_2_filtered, y_1_filtered, color='blue', marker='o')
plt.title('Scatter Plot of coordinate')
plt.xlabel('X ')
plt.ylabel('Y ')

print(f'min x :{np.min(y_1)} , max x :{np.max(y_1)}')
print(f'min y :{np.min(y_2)} , max y :{np.max(y_2)}')
len_x = np.max(y_1)-np.min(y_1)
len_y = np.max(y_2)-np.min(y_2)
print(f'len of x : {np.max(y_1)-np.min(y_1)}')
print(f'len of y : {np.max(y)-np.min(y)}')
diameter = math.sqrt((len_x**2)+(len_y**2))
print(f'diameter : {math.sqrt((len_x**2)+(len_y**2))}')

diameter = .71
list_new_d = (diameter * list_of_d) / 1068
list_new_d

import numpy as np
import matplotlib.pyplot as plt

# فرض کنید y_1، y_2 و list_new_d از قبل تعریف شده‌اند
y_2 = np.array(y_1_filtered)  # مرکزهای دایره در محور x
y_1 = np.array(y_2_filtered)  # مرکزهای دایره در محور y
list_new_d = np.array(list_new_d)  # شعاع‌های دایره‌ها

# انتخاب 5 دایره با بزرگترین شعاع‌ها
top_5_indices = np.argsort(list_new_d)[-20:]  # ایندکس‌های 5 شعاع بزرگتر

# فیلتر کردن مراکز و شعاع‌های مربوطه
y_1_top_5 = y_1[top_5_indices]
y_2_top_5 = y_2[top_5_indices]
list_new_d_top_5 = list_new_d[top_5_indices]

# ایجاد یک scatter plot با دایره‌های انتخاب‌شده
fig, ax = plt.subplots()

# رسم دایره‌های بزرگتر
for i in range(len(list_new_d_top_5)):
    circle = plt.Circle((y_1_top_5[i], y_2_top_5[i]), list_new_d_top_5[i], color='b', fill=False)  # دایره بدون رنگ داخلی
    ax.add_patch(circle)

# تنظیمات محور‌ها
ax.set_aspect('equal', 'box')  # برای نسبت مساوی بین محور x و y
plt.xlim(min(y_1_top_5) - max(list_new_d_top_5), max(y_1_top_5) + max(list_new_d_top_5))  # تنظیمات محدوده x
plt.ylim(min(y_2_top_5) - max(list_new_d_top_5), max(y_2_top_5) + max(list_new_d_top_5))  # تنظیمات محدوده y

# عنوان و نمایش
plt.title('Scatter plot of top 5 circles with largest radii')
plt.xlabel('y_1 (X-axis)')
plt.ylabel('y_2 (Y-axis)')
plt.xlim(3.8,4.3)
plt.ylim(50.75,51.6)
plt.grid(True)

# نمایش نمودار
plt.show()

import math
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# بارگذاری فایل CSV
original_file = np.array(pd.read_csv('/content/Orginal.csv'))

# برش داده‌ها
x = original_file[:, :-3]
y = original_file[:, -2:]
for i2 in range(137):
  x_1 = x[:,i2]
  y_1 = y[:,0]
  y_2 = y[:,1]

  x_1_filtered = x_1[x_1 != -200]
  y_1_filtered = y_1[x_1 != -200]
  y_2_filtered = y_2[x_1 != -200]

  P = 0
  f = 868 # MH
  P_loss = P - x_1_filtered
  list_of_d = 10 ** ((P_loss - 20 * np.log10(f) - 32.45) / 20)

  plt.scatter(y_2_filtered, y_1_filtered, color='blue', marker='o')
  plt.title('Scatter Plot of coordinate')
  plt.xlabel('X ')
  plt.ylabel('Y ')


  len_x = np.max(y_1)-np.min(y_1)
  len_y = np.max(y_2)-np.min(y_2)

  diameter = math.sqrt((len_x**2)+(len_y**2))

  diameter = .71
  list_new_d = (diameter * list_of_d) / 1068
  list_new_d

  import numpy as np
  import matplotlib.pyplot as plt

  # فرض کنید y_1، y_2 و list_new_d از قبل تعریف شده‌اند
  y_2 = np.array(y_1_filtered)  # مرکزهای دایره در محور x
  y_1 = np.array(y_2_filtered)  # مرکزهای دایره در محور y
  list_new_d = np.array(list_new_d)  # شعاع‌های دایره‌ها

  # انتخاب 5 دایره با بزرگترین شعاع‌ها
  top_5_indices = np.argsort(list_new_d)[-20:]  # ایندکس‌های 5 شعاع بزرگتر

  # فیلتر کردن مراکز و شعاع‌های مربوطه
  y_1_top_5 = y_1[top_5_indices]
  y_2_top_5 = y_2[top_5_indices]
  list_new_d_top_5 = list_new_d[top_5_indices]

  # ایجاد یک scatter plot با دایره‌های انتخاب‌شده
  fig, ax = plt.subplots()

  # رسم دایره‌های بزرگتر
  for i in range(len(list_new_d_top_5)):
      circle = plt.Circle((y_1_top_5[i], y_2_top_5[i]), list_new_d_top_5[i], color='b', fill=False)  # دایره بدون رنگ داخلی
      ax.add_patch(circle)

  # تنظیمات محور‌ها
  ax.set_aspect('equal', 'box')  # برای نسبت مساوی بین محور x و y
  plt.xlim(min(y_1_top_5) - max(list_new_d_top_5), max(y_1_top_5) + max(list_new_d_top_5))  # تنظیمات محدوده x
  plt.ylim(min(y_2_top_5) - max(list_new_d_top_5), max(y_2_top_5) + max(list_new_d_top_5))  # تنظیمات محدوده y

  # عنوان و نمایش
  plt.title('Scatter plot of top 5 circles with largest radii')
  plt.xlabel('y_1 (X-axis)')
  plt.ylabel('y_2 (Y-axis)')
  plt.xlim(3.8,4.3)
  plt.ylim(50.75,51.6)
  plt.grid(True)

  # نمایش نمودار
  plt.savefig(f'scatter_index_{i2}.png')  # نام فایل را تنظیم کنید
  plt.close()

import numpy as np

# فرض می‌کنیم x، y و ستون‌ها را از قبل تعریف کرده‌اید
# ابتدا یک ماسک ایجاد می‌کنیم که سطرهایی که برابر با -200 نیستند را نگه دارد
mask = x_1 != -200

# سپس از این ماسک برای فیلتر کردن سطرها در هر سه لیست استفاده می‌کنیم
x_1_filtered = x_1[mask]
y_1_filtered = y_1[mask]
y_2_filtered = y_2[mask]

import numpy as np
import math

# فرض کنید x_1_filtered و فرکانس f و توان P تعریف شده‌اند
P = 0
f = 868  # MHz

# ایجاد لیست جدید برای نگهداری فواصل محاسبه‌شده
list_of_d = []

# تبدیل x_1_filtered به فاصله (d) با استفاده از فرمول افت توان
for i in x_1_filtered:
    P_loss = P - i
    d = 10 ** ((P_loss - 20 * math.log10(f) - 32.45) / 20)
    list_of_d.append(d)

# نتیجه به صورت یک لیست از فواصل (d)
list_of_d = np.array(list_of_d)  # به صورت آرایه numpy نیز می‌توانید ذخیره کنید

import numpy as np
import math

# فرض کنید x_1_filtered، فرکانس f و توان P تعریف شده‌اند
P = 0
f = 868  # MHz

# محاسبه افت توان (P_loss)
P_loss = P - x_1_filtered

# محاسبه d به صورت برداری بدون نیاز به حلقه for
list_of_d = 10 ** ((P_loss - 20 * np.log10(f) - 32.45) / 20)

import numpy as np

# فرض کنید diameter تعریف شده است
diameter = 50  # به عنوان مثال یک مقدار برای diameter

# محاسبه فاصله‌های جدید به صورت برداری
list_new_d = (diameter * list_of_d) / 1068

import numpy as np
import matplotlib.pyplot as plt

# فرض کنید y_1، y_2 و list_new_d از قبل تعریف شده‌اند
y_1 = np.array(y_1_filtered)  # مرکزهای دایره در محور x
y_2 = np.array(y_2_filtered)  # مرکزهای دایره در محور y
list_new_d = np.array(list_new_d)  # شعاع‌های دایره‌ها

# ایجاد یک scatter plot با دایره‌ها
fig, ax = plt.subplots()

# رسم دایره‌ها
for i in range(len(list_new_d)):
    circle = plt.Circle((y_1[i], y_2[i]), list_new_d[i], color='b', fill=False)  # دایره بدون رنگ داخلی
    ax.add_patch(circle)

# تنظیمات محور‌ها
ax.set_aspect('equal', 'box')  # برای نسبت مساوی بین محور x و y
plt.xlim(min(y_1) - max(list_new_d), max(y_1) + max(list_new_d))  # تنظیمات محدوده x
plt.ylim(min(y_2) - max(list_new_d), max(y_2) + max(list_new_d))  # تنظیمات محدوده y

# عنوان و نمایش
plt.title('Scatter plot of circles with centers (y_1, y_2) and radii list_new_d')
plt.xlabel('y_1 (X-axis)')
plt.ylabel('y_2 (Y-axis)')
plt.grid(True)

# نمایش نمودار
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import gaussian_kde

# فرض کنید y_1، y_2 و list_new_d از قبل تعریف شده‌اند
y_1 = np.array(y_1_filtered)  # مرکزهای دایره در محور x
y_2 = np.array(y_2_filtered)  # مرکزهای دایره در محور y
list_new_d = np.array(list_new_d)  # شعاع‌های دایره‌ها

# ایجاد یک scatter plot با دایره‌ها
fig, ax = plt.subplots()

# رسم دایره‌ها
for i in range(len(list_new_d)):
    circle = plt.Circle((y_1[i], y_2[i]), list_new_d[i], color='b', fill=False)  # دایره بدون رنگ داخلی
    ax.add_patch(circle)

# تنظیمات محور‌ها
ax.set_aspect('equal', 'box')  # برای نسبت مساوی بین محور x و y

# ایجاد داده‌های شبکه برای نقشه چگالی
x_min, x_max = min(y_1) - max(list_new_d), max(y_1) + max(list_new_d)
y_min, y_max = min(y_2) - max(list_new_d), max(y_2) + max(list_new_d)
x_values, y_values = np.mgrid[x_min:x_max:100j, y_min:y_max:100j]

# ایجاد لیستی از مراکز دایره‌ها برای محاسبه چگالی
positions = np.vstack([x_values.ravel(), y_values.ravel()])
centers = np.vstack([y_1, y_2])

# محاسبه چگالی با استفاده از gaussian_kde
kde = gaussian_kde(centers)
density = kde(positions).reshape(x_values.shape)

# نمایش نقشه چگالی
plt.imshow(np.rot90(density), cmap=plt.cm.hot, extent=[x_min, x_max, y_min, y_max])

# عنوان و نمایش
plt.title('Scatter plot of circles with density highlighting intersections')
plt.xlabel('y_1 (X-axis)')
plt.ylabel('y_2 (Y-axis)')
plt.grid(True)

# نمایش نمودار
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import gaussian_kde

# فرض کنید y_1، y_2 و list_new_d از قبل تعریف شده‌اند
y_1 = np.array(y_1_filtered, dtype=float)  # مرکزهای دایره در محور x به صورت float
y_2 = np.array(y_2_filtered, dtype=float)  # مرکزهای دایره در محور y به صورت float
list_new_d = np.array(list_new_d, dtype=float)  # شعاع‌های دایره‌ها به صورت float

# ایجاد یک scatter plot با دایره‌ها
fig, ax = plt.subplots()

# رسم دایره‌ها
for i in range(len(list_new_d)):
    circle = plt.Circle((y_1[i], y_2[i]), list_new_d[i], color='b', fill=False)  # دایره بدون رنگ داخلی
    ax.add_patch(circle)

# تنظیمات محور‌ها
ax.set_aspect('equal', 'box')  # برای نسبت مساوی بین محور x و y

# ایجاد داده‌های شبکه برای نقشه چگالی
x_min, x_max = min(y_1) - max(list_new_d), max(y_1) + max(list_new_d)
y_min, y_max = min(y_2) - max(list_new_d), max(y_2) + max(list_new_d)
x_values, y_values = np.mgrid[x_min:x_max:100j, y_min:y_max:100j]

# ایجاد لیستی از مراکز دایره‌ها برای محاسبه چگالی
positions = np.vstack([x_values.ravel(), y_values.ravel()])
centers = np.vstack([y_1, y_2])

# محاسبه چگالی با استفاده از gaussian_kde
kde = gaussian_kde(centers)
density = kde(positions).reshape(x_values.shape)

# نمایش نقشه چگالی
plt.imshow(np.rot90(density), cmap=plt.cm.hot, extent=[x_min, x_max, y_min, y_max])

# عنوان و نمایش
plt.title('Scatter plot of circles with density highlighting intersections')
plt.xlabel('y_1 (X-axis)')
plt.ylabel('y_2 (Y-axis)')
plt.grid(True)

# نمایش نمودار
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# فرض کنید y_1، y_2 و list_new_d از قبل تعریف شده‌اند
y_2 = np.array(y_1_filtered)  # مرکزهای دایره در محور x
y_1 = np.array(y_2_filtered)  # مرکزهای دایره در محور y
list_new_d = np.array(list_new_d)  # شعاع‌های دایره‌ها

# انتخاب 5 دایره با بزرگترین شعاع‌ها
top_5_indices = np.argsort(list_new_d)[-5:]  # ایندکس‌های 5 شعاع بزرگتر

# فیلتر کردن مراکز و شعاع‌های مربوطه
y_1_top_5 = y_1[top_5_indices]
y_2_top_5 = y_2[top_5_indices]
list_new_d_top_5 = list_new_d[top_5_indices]

# ایجاد یک scatter plot با دایره‌های انتخاب‌شده
fig, ax = plt.subplots()

# رسم دایره‌های بزرگتر
for i in range(len(list_new_d_top_5)):
    circle = plt.Circle((y_1_top_5[i], y_2_top_5[i]), list_new_d_top_5[i], color='b', fill=False)  # دایره بدون رنگ داخلی
    ax.add_patch(circle)

# تنظیمات محور‌ها
ax.set_aspect('equal', 'box')  # برای نسبت مساوی بین محور x و y
plt.xlim(min(y_1_top_5) - max(list_new_d_top_5), max(y_1_top_5) + max(list_new_d_top_5))  # تنظیمات محدوده x
plt.ylim(min(y_2_top_5) - max(list_new_d_top_5), max(y_2_top_5) + max(list_new_d_top_5))  # تنظیمات محدوده y

# عنوان و نمایش
plt.title('Scatter plot of top 5 circles with largest radii')
plt.xlabel('y_1 (X-axis)')
plt.ylabel('y_2 (Y-axis)')
plt.grid(True)

# نمایش نمودار
plt.show()

import numpy as np
from itertools import combinations
import matplotlib.pyplot as plt

# Function to calculate Euclidean distance
def euclidean_distance(p1, p2):
    return np.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

# Function to find intersecting points
def find_intersecting_points(points, radii):
    intersecting_pairs = []
    for (i, point1), (j, point2) in combinations(enumerate(points), 2):
        distance = euclidean_distance(point1, point2)
        if distance <= (radii[i] + radii[j]):
            intersecting_pairs.append((i, j))  # store the indices of the intersecting points
    return intersecting_pairs

# Example usage
# فرض کنید x و list_of_d از قبل تعریف شده‌اند
# points را با x_1 و y_1, y_2, list_new_d به روز کنید
for index in range(0, 138):  # از 0 تا 137
    x_1 = x[:, index]  # به روز رسانی x_1

    # با استفاده از x_1 محاسبات شعاع‌های جدید و مراکز دایره‌ها را انجام دهید
    diameter = 0.71
    list_new_d = (diameter * list_of_d) / 1068

    # فرض کنید y_1، y_2 و list_new_d از قبل تعریف شده‌اند
    y_2 = np.array(y_1_filtered)  # مرکزهای دایره در محور x
    y_1 = np.array(y_2_filtered)  # مرکزهای دایره در محور y
    list_new_d = np.array(list_new_d)  # شعاع‌های دایره‌ها

    # انتخاب 20 دایره با بزرگترین شعاع‌ها
    top_20_indices = np.argsort(list_new_d)[-20:]  # ایندکس‌های 20 شعاع بزرگتر

    # فیلتر کردن مراکز و شعاع‌های مربوطه
    y_1_top_20 = y_1[top_20_indices]
    y_2_top_20 = y_2[top_20_indices]
    list_new_d_top_20 = list_new_d[top_20_indices]

    # ایجاد یک scatter plot با دایره‌های انتخاب‌شده
    fig, ax = plt.subplots()

    # رسم دایره‌های بزرگتر
    for i in range(len(list_new_d_top_20)):
        circle = plt.Circle((y_1_top_20[i], y_2_top_20[i]), list_new_d_top_20[i], color='b', fill=False)  # دایره بدون رنگ داخلی
        ax.add_patch(circle)

    # تنظیمات محور‌ها
    ax.set_aspect('equal', 'box')  # برای نسبت مساوی بین محور x و y
    plt.xlim(min(y_1_top_20) - max(list_new_d_top_20), max(y_1_top_20) + max(list_new_d_top_20))  # تنظیمات محدوده x
    plt.ylim(min(y_2_top_20) - max(list_new_d_top_20), max(y_2_top_20) + max(list_new_d_top_20))  # تنظیمات محدوده y

    # عنوان و نمایش
    plt.title(f'Scatter plot of top 20 circles with largest radii for x[:, {index}]')
    plt.xlabel('y_1 (X-axis)')
    plt.ylabel('y_2 (Y-axis)')
    plt.xlim(3.8, 4.3)
    plt.ylim(50.75, 51.6)
    plt.grid(True)

    # ذخیره نمودار به عنوان یک فایل تصویر
    plt.savefig(f'scatter_plot_index_{index}.png')  # نام فایل را تنظیم کنید
    plt.close()  # بستن نمودار برای جلوگیری از تداخل در حلقه